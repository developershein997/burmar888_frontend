import React, { useState, useEffect } from 'react';
import { Container, Row, Col, Card, Button, Spinner, Alert, Table, Badge } from 'react-bootstrap';
import UserBalance from './UserBalance';
import NumberDisplay from './NumberDisplay';
import { BetSizeButtons, BetColorButtons } from './BetButtons';
import RollButton from './RollButton';
import ResultAlert from './ResultAlert';
import ApiResponseAlert from './ApiResponseAlert';
import BetHistory from './BetHistory';

// Import digit images
import digit0 from './assets/digit_img/0_Red-Purple.png';
import digit1 from './assets/digit_img/1_Green.png';
import digit2 from './assets/digit_img/2_Red.png';
import digit3 from './assets/digit_img/3_Green.png';
import digit4 from './assets/digit_img/4_Red.png';
import digit5 from './assets/digit_img/5_Green-Purple.png';
import digit6 from './assets/digit_img/6_Red.png';
import digit7 from './assets/digit_img/7_Green.png';
import digit8 from './assets/digit_img/8_Red.png';
import digit9 from './assets/digit_img/9_Green.png';

const digitImages = [
  digit0, digit1, digit2, digit3, digit4,
  digit5, digit6, digit7, digit8, digit9
];

// Custom hook for user
function useUser() {
  const [user, setUser] = useState(null);
  useEffect(() => {
    fetch('https://luckymillion.pro/api/user', {
      headers: {
        'Authorization': 'Bearer ' + localStorage.getItem('token'),
        'Accept': 'application/json'
      }
    })
      .then(res => res.json())
      .then(data => setUser(data.data));
  }, []);
  return [user, setUser];
}

export default function DigitBetGame() {
  const [user, setUser] = useUser();
  const [randomNumber, setRandomNumber] = useState(null);
  const [betType, setBetType] = useState(null);
  const [selectedDigit, setSelectedDigit] = useState(null);
  const [resultMessage, setResultMessage] = useState('');
  const [loading, setLoading] = useState(false);
  const [apiResponseMessage, setApiResponseMessage] = useState('');
  const [history, setHistory] = useState([]);
  const [betAmount, setBetAmount] = useState(1);
  const [betMultiplier, setBetMultiplier] = useState(1);

  useEffect(() => {
    fetch('https://luckymillion.pro/api/digitbet/history', {
      headers: {
        'Authorization': 'Bearer ' + localStorage.getItem('token'),
        'Accept': 'application/json'
      }
    })
      .then(res => res.json())
      .then(data => setHistory(data.data || []));
  }, []);

  const generateNumber = () => Math.floor(Math.random() * 10);

  const placeBet = (type) => {
    setBetType(type);
    setSelectedDigit(null);
    setResultMessage('');
    setApiResponseMessage('');
    setRandomNumber(null);
  };

  const selectDigit = (num) => {
    setSelectedDigit(num);
    setBetType(null);
    setResultMessage('');
    setApiResponseMessage('');
    setRandomNumber(null);
  };

  const checkBet = (number) => {
    if (selectedDigit !== null) {
      const win = (number === selectedDigit);
      setResultMessage(
        win
          ? `You Won! The number was ${number}.`
          : `You Lost! The number was ${number}.`
      );
      return win ? 'win' : 'lose';
    }
    let win = false;
    let category = (number >= 0 && number <= 4) ? 'Small' : 'Big';

    switch (betType) {
      case 'small': win = (number >= 0 && number <= 4); break;
      case 'big': win = (number >= 5 && number <= 9); break;
      default: break;
    }

    if (win) setResultMessage(`You Won! The number was ${number}. It's ${category}.`);
    else setResultMessage(`You Lost! The number was ${number}. It's ${category}.`);
    return win ? 'win' : 'lose';
  };

  const sendToBackend = async (bet, resultNumber, winStatus, digit = null) => {
    setLoading(true);
    try {
      const body = {
        bet_type: bet,
        rolled_number: resultNumber,
        outcome: winStatus,
        bet_amount: betAmount,
        multiplier: betMultiplier
      };
      if (digit !== null) body.digit = digit;

      const response = await fetch('https://luckymillion.pro/api/digitbet', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer ' + localStorage.getItem('token'),
          'Accept': 'application/json'
        },
        body: JSON.stringify(body)
      });
      const data = await response.json();
      setApiResponseMessage(`Backend Response: ${data.message}`);
      if (data.data && data.data.balance) setUser(prev => ({ ...prev, balance: data.data.balance }));
      if (data.data && data.data.history) setHistory(data.data.history);
      else {
        fetch('https://luckymillion.pro/api/digitbet/history', {
          headers: {
            'Authorization': 'Bearer ' + localStorage.getItem('token'),
            'Accept': 'application/json'
          }
        })
          .then(res => res.json())
          .then(data => setHistory(data.data || []));
      }
    } catch (error) {
      setApiResponseMessage(`Backend Error: ${error.message || 'Could not connect to backend.'}`);
    } finally {
      setLoading(false);
    }
  };

  const handleRoll = async () => {
    setResultMessage('');
    setApiResponseMessage('');
    setRandomNumber(null);

    if (selectedDigit === null && !betType) {
      setResultMessage('Please place a bet first!');
      return;
    }

    const newNumber = generateNumber();
    setRandomNumber(newNumber);

    let winStatus;
    if (selectedDigit !== null) {
      winStatus = (newNumber === selectedDigit) ? 'win' : 'lose';
      setResultMessage(
        winStatus === 'win'
          ? `You Won! The number was ${newNumber}.`
          : `You Lost! The number was ${newNumber}.`
      );
      await sendToBackend('digit', newNumber, winStatus, selectedDigit);
    } else {
      winStatus = checkBet(newNumber);
      await sendToBackend(betType, newNumber, winStatus);
    }

    // Reset selection for next round
    setSelectedDigit(null);
    setBetType(null);
  };

  return (
    <Container className="d-flex align-items-center justify-content-center min-vh-100" style={{ background: 'linear-gradient(135deg, #7b2ff2 0%, #f357a8 100%)' }}>
      <Row className="w-100 justify-content-center">
        <Col xs={12} md={8} lg={6}>
          <Card className="shadow-lg p-4 rounded-4">
            <Card.Body>
              <UserBalance balance={user?.balance} />
              <h1 className="text-center mb-4 fw-bold">Digit Bet Game</h1>
              <div className="mb-4">
                <Card className="bg-light text-center p-4">
                  <Card.Body>
                    {randomNumber !== null ? (
                      <img
                        src={digitImages[randomNumber]}
                        alt={randomNumber}
                        style={{ width: '90px', height: '90px', objectFit: 'contain' }}
                      />
                    ) : (
                      <span className="display-4 text-muted">?</span>
                    )}
                  </Card.Body>
                </Card>
              </div>
              <h4 className="text-center mb-3">Bet on Size</h4>
              <div className="d-flex justify-content-center mb-2 gap-2">
                {[0, 1, 2, 3, 4].map(num => (
                  <img
                    key={num}
                    src={digitImages[num]}
                    alt={num}
                    style={{
                      width: 40,
                      height: 40,
                      objectFit: 'contain',
                      border: selectedDigit === num ? '3px solid #007bff' : '2px solid transparent',
                      borderRadius: '50%',
                      cursor: 'pointer',
                      boxShadow: selectedDigit === num ? '0 0 8px #007bff' : undefined
                    }}
                    onClick={() => selectDigit(num)}
                  />
                ))}
              </div>
              <div className="d-flex justify-content-center mb-3 gap-2">
                {[5, 6, 7, 8, 9].map(num => (
                  <img
                    key={num}
                    src={digitImages[num]}
                    alt={num}
                    style={{
                      width: 40,
                      height: 40,
                      objectFit: 'contain',
                      border: selectedDigit === num ? '3px solid #007bff' : '2px solid transparent',
                      borderRadius: '50%',
                      cursor: 'pointer',
                      boxShadow: selectedDigit === num ? '0 0 8px #007bff' : undefined
                    }}
                    onClick={() => selectDigit(num)}
                  />
                ))}
              </div>
              <div className="d-flex justify-content-center gap-3 mb-3">
                <Button
                  variant={betType === 'big' ? 'warning' : 'outline-warning'}
                  size="lg"
                  className={betType === 'big' ? 'fw-bold shadow' : ''}
                  onClick={() => placeBet('big')}
                  disabled={loading || selectedDigit !== null}
                >
                  Big (5-9)
                </Button>
                <Button
                  variant={betType === 'small' ? 'primary' : 'outline-primary'}
                  size="lg"
                  className={betType === 'small' ? 'fw-bold shadow' : ''}
                  onClick={() => placeBet('small')}
                  disabled={loading || selectedDigit !== null}
                >
                  Small (0-4)
                </Button>
              </div>
              <div className="mb-3">
                <div className="mb-2">
                  <label htmlFor="betAmount" className="form-label fw-bold">Bet Amount</label>
                  <input
                    type="number"
                    min="1"
                    className="form-control"
                    id="betAmount"
                    value={betAmount}
                    onChange={e => setBetAmount(Number(e.target.value))}
                    placeholder="Enter your bet amount"
                    style={{ maxWidth: 200, margin: '0 auto' }}
                  />
                </div>
                <div className="d-flex justify-content-center gap-2">
                  {[1, 5, 10, 20, 50, 100].map(mult => (
                    <Button
                      key={mult}
                      variant={betMultiplier === mult ? 'primary' : 'outline-primary'}
                      size="sm"
                      onClick={() => setBetMultiplier(mult)}
                    >
                      x{mult}
                    </Button>
                  ))}
                </div>
                <div className="text-center fw-bold my-2" style={{fontSize: '1.1rem'}}>
                  {betAmount > 0 && betMultiplier > 0 && (
                    <>
                      {betAmount} x {betMultiplier} = <span className="text-primary">{betAmount * betMultiplier}</span>
                    </>
                  )}
                </div>
              </div>
              <div className="mb-3">
                <Button
                  variant="primary"
                  size="lg"
                  className="w-100 fw-bold"
                  onClick={handleRoll}
                  disabled={(!betType && selectedDigit === null) || loading}
                >
                  {loading ? (
                    <>
                      <Spinner as="span" animation="border" size="sm" role="status" aria-hidden="true" className="me-2" />
                      Rolling...
                    </>
                  ) : (
                    'Roll the Dice!'
                  )}
                </Button>
              </div>
              {resultMessage && (
                <Alert variant={resultMessage.includes('Won') ? 'success' : resultMessage.includes('Lost') ? 'danger' : 'info'} className="text-center fw-bold">
                  {resultMessage}
                </Alert>
              )}
              {apiResponseMessage && (
                <Alert variant={apiResponseMessage.includes('Error') ? 'danger' : 'secondary'} className="text-center">
                  {apiResponseMessage}
                </Alert>
              )}
              {history.length > 0 && (
                <div className="mt-4">
                  <h5>Bet History</h5>
                  <div className="table-responsive">
                    <Table striped bordered hover>
                      <thead>
                        <tr>
                          <th>Date</th>
                          <th>Bet Type</th>
                          <th>Number</th>
                          <th>Outcome</th>
                        </tr>
                      </thead>
                      <tbody>
                        {history.map((h, idx) => (
                          <tr key={idx}>
                            <td>{new Date(h.timestamp).toLocaleString()}</td>
                            <td>{h.betType || h.digit}</td>
                            <td>{h.rolledNumber}</td>
                            <td>
                              <Badge bg={h.outcome === 'win' ? 'success' : 'danger'}>
                                {h.outcome}
                              </Badge>
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </Table>
                  </div>
                </div>
              )}
              <div className="mt-4 text-center text-muted">
                <div>
                  <strong>Current Bet:</strong> {selectedDigit !== null ? `Digit ${selectedDigit}` : betType ? betType.charAt(0).toUpperCase() + betType.slice(1) : 'None'}
                </div>
                <div>
                  <small>Select a digit or a bet (Small/Big) and then click <b>"Roll the Dice!"</b></small>
                </div>
              </div>
            </Card.Body>
          </Card>
        </Col>
      </Row>
    </Container>
  );
}
